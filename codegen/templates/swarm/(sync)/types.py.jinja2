# Code generated from codegen/templates/swarm/(sync)/types.py.jinja2. DO NOT EDIT MANUALLY!

{% set agent_class_name = 'AsyncAgent' if is_async else 'Agent' %}
{% set agent_function_name = 'AsyncAgentFunction' if is_async else 'AgentFunction' %}
{% set agent_instructions_alias = 'AsyncAgentInstructions' if is_async else 'AgentInstructions' %}
{% set result_class_name = 'AsyncResult' if is_async else 'Result' %}
{% set response_class_name = 'AsyncResponse' if is_async else 'Response' %}
{% set async_prefix = 'Async' if is_async else '' %}

from pydantic import BaseModel
from openai.types.chat import (
    ChatCompletionMessage,
    ChatCompletionChunk,
    ChatCompletion,
)
from openai import {{ async_prefix }}Stream
from openai.types.chat.chat_completion_message_tool_call import (
    ChatCompletionMessageToolCall,
    Function,
)
from typing import (
    Any,
    {{ async_prefix }}Generator,
    List,
    Callable,
    TypedDict,
    Union,
    Optional,
    TypeAlias,
    Literal,
    Coroutine,
    Dict,
)

Message : TypeAlias = Dict[Literal[
    "content",
    "sender",
    "role",
    "function_call",
    "tool_calls",
    "tool_call_id",
    "tool_name",
    "audio",
    "refusal",
], Any]


class RetryState(BaseModel):
  tries: int = 0
  sleep_time: int = 0
  error: str = ""

{% if is_async %}
{{ agent_function_name }} = Callable[..., Coroutine[Any, Any, Union[str, "{{ agent_class_name }}", dict, "AsyncResult"]]]
{{ agent_instructions_alias }}: TypeAlias = Union[str, Callable[..., Coroutine[Any, Any, str]]]
{% else %}
{{ agent_function_name }} = Callable[..., Union[str, "{{ agent_class_name }}", dict, "{{ result_class_name }}"]]
{{ agent_instructions_alias }}: TypeAlias = Union[str, Callable[..., str]]
{% endif %}

class {{ agent_class_name }}(BaseModel):
    name: str = "Agent"
    model: str = "gpt-4o"
    instructions: {{ agent_instructions_alias }} = "You are a helpful agent."  # type: ignore
    functions: List[{{ agent_function_name }}] = []
    tool_choice: Optional[str] = None
    parallel_tool_calls: bool = True

class {{ response_class_name }}(BaseModel):
    messages: List[Message] = []
    agent: Optional[{{ agent_class_name }}] = None
    context_variables: dict = {}


class {{ result_class_name }}(BaseModel):
    """
    Encapsulates the possible return values for an agent function.

    Attributes:
        value (str): The result value as a string.
        agent ({{ agent_class_name }}): The agent instance, if applicable.
        context_variables (dict): A dictionary of context variables.
    """

    value: str = ""
    agent: Optional[{{ agent_class_name }}] = None
    context_variables: dict = {}


{{ async_prefix }}DelimStreamingChunk = dict[Literal["delim"], Literal["start", "end"]]
{{ async_prefix }}ResponseStreamingChunk = dict[Literal["response"], {{ response_class_name }}]

class {{ async_prefix }}DeltaResponseStreamingChunk(TypedDict):
    partial_response: {{ response_class_name }}

class {{ async_prefix }}MessageStreamingChunk(TypedDict):
    content: Any
    sender: str
    role: Literal["system", "user", "assistant", "tool"]
    tool_calls: List[dict[Literal["id", "function", "type"], Any]]
    function_call: None


{{ async_prefix }}StreamingResponse: TypeAlias = {{ async_prefix }}Generator[
    Union[
        {{ async_prefix }}DelimStreamingChunk,
        {{ async_prefix }}MessageStreamingChunk,
        {{ async_prefix }}ResponseStreamingChunk,
        {{ async_prefix }}DeltaResponseStreamingChunk,
    ],
    None,
    {{ "" if is_async else "None," }}
]
